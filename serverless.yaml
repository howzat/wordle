# serverless.yml

service: wordle

provider:
  name: aws
  runtime: provided.al2
  stage: dev
  region: eu-west-2
  stackName: wordle-${sls:stage} # Overwrite default CloudFormation stack name. Default is ${self:service}-${sls:stage}
  apiName: wordle-api-${sls:stage} # Overwrite default API Gateway name. Default is ${sls:stage}-${self:service}
  profile: production
  memorySize: 512
  deploymentBucket:
    name: com.serverless.${self:provider.region}.deploys # Overwrite the default deployment bucket
    serverSideEncryption: AES256 # when using server-side encryption
  deploymentPrefix: serverless # Overwrite the default S3 prefix under which deployed artifacts should be stored. Default is serverless
  versionFunctions: false # Optional function versioning
  stackTags: # Optional CF stack tags
    key: wordle-stack-tag
  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    - Effect: Allow
      Principal: '*'
      Action: 'Update:*'
      Resource: '*'
    - Effect: Deny
      Principal: '*'
      Action:
        - Update:Replace
        - Update:Delete
      Resource: '*'
      Condition:
        StringEquals:
          ResourceType:
            - AWS::EC2::Instance

functions:
  wordleSolvePost: # A Function
    handler: wordle
    events: # The Events that trigger this Function
      - httpApi: 'POST /wordle/solve'

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: words